MODULE user(semaphore, active)
VAR
  state : { idle, entering, critical, exiting };
ASSIGN
  init(state) := idle;
  next(state) := case
    state = idle & active : { idle, entering };
    state = entering & active & !semaphore : critical;
    state = critical & active : { critical, exiting };
    state = exiting & active : idle;
    TRUE : state;
  esac;

MODULE main
VAR
  semaphore : boolean;
  running: 0..1;
  proc1 : user(semaphore, next(running) = 0);
  proc2 : user(semaphore, next(running) = 1);
ASSIGN
  init(semaphore) := FALSE;
  next(semaphore) := case
    next(running) = 0 & proc1.state = entering: TRUE;
    next(running) = 0 & proc1.state = exiting : FALSE;
    next(running) = 1 & proc2.state = entering: TRUE;
    next(running) = 1 & proc2.state = exiting : FALSE;    
    TRUE : semaphore;
  esac;

FAIRNESS
  running = 0
FAIRNESS
  running = 1
FAIRNESS
  proc1.state = idle
FAIRNESS
  proc2.state = idle

SPEC AG !(proc1.state = critical & proc2.state = critical); -- safety

SPEC AG (proc1.state = entering -> AF proc1.state = critical); -- liveness
